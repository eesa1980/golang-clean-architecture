// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	application3 "clean-architecture/pkg/application"
	application2 "clean-architecture/pkg/application/users"
	application "clean-architecture/pkg/application/users/queries"
	getuserbyid "clean-architecture/pkg/application/users/queries/get-user"
	listusers "clean-architecture/pkg/application/users/queries/list-users"
	"clean-architecture/pkg/infrastructure"
	confighandler "clean-architecture/pkg/infrastructure/config"
	repositories "clean-architecture/pkg/infrastructure/repository"
	userrepository "clean-architecture/pkg/infrastructure/repository/user-repository"
	services "clean-architecture/pkg/infrastructure/service"
	filehandlerservice "clean-architecture/pkg/infrastructure/service/file-handler"
	"clean-architecture/pkg/web/api/server"
	container "clean-architecture/pkg/web/crosscutting"

	"github.com/google/wire"
)

// Injectors from wire.go:

func Initialize() server.Server {
	iFileHandlerService := filehandlerservice.New()
	iUserRepository := userrepository.New(iFileHandlerService)
	getUserById := getuserbyid.New(iUserRepository)
	applicationConfig := confighandler.New()
	repositoriesRepositories := repositories.Repositories{
		Config:         applicationConfig,
		UserRepository: iUserRepository,
	}
	servicesServices := services.Services{
		FileHandler: iFileHandlerService,
	}
	dependencies := infrastructure.Dependencies{
		Repositories: repositoriesRepositories,
		Services:     servicesServices,
	}
	listUsers := listusers.New(dependencies)
	queries := application.Queries{
		GetUserById: getUserById,
		ListUsers:   listUsers,
	}
	users := application2.Users{
		Queries: queries,
	}
	applicationDependencies := application3.Dependencies{
		Users: users,
	}
	containerDependencies := &container.Dependencies{
		Application:    applicationDependencies,
		Infrastructure: dependencies,
	}
	serverServer := server.New(containerDependencies)
	return serverServer
}

// wire.go:

var apps = wire.NewSet(wire.Struct(new(container.Dependencies), "*"), application3.Set, infrastructure.Set, server.New)
