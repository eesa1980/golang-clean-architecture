// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"net/http"
	application5 "wire-demo-2/pkg/application"
	application4 "wire-demo-2/pkg/application/users"
	application3 "wire-demo-2/pkg/application/users/queries"
	"wire-demo-2/pkg/application/users/queries/get-user"
	application2 "wire-demo-2/pkg/application/users/queries/list-users"
	infrastructure2 "wire-demo-2/pkg/infrastructure"
	"wire-demo-2/pkg/infrastructure/repository"
	"wire-demo-2/pkg/web/controller"
	"wire-demo-2/pkg/web/crosscutting"
)

// Injectors from wire.go:

func Initialize() App {
	iUserService := infrastructure.MakeUserRepository()
	dependencies := infrastructure2.Dependencies{
		UserService: iUserService,
	}
	getUserById := application.MakeGetUserById(dependencies)
	listUsers := application2.MakeListUsers(dependencies)
	queries := application3.Queries{
		GetUserById: getUserById,
		ListUsers:   listUsers,
	}
	users := application4.Users{
		Queries: queries,
	}
	applicationDependencies := application5.Dependencies{
		Users: users,
	}
	crosscuttingDependencies := crosscutting.Dependencies{
		Application:    applicationDependencies,
		Infrastructure: dependencies,
	}
	app := MakeApp(crosscuttingDependencies)
	return app
}

// wire.go:

type App struct {
	MakeApp func()
}

func MakeApp(
	deps crosscutting.Dependencies,
) App {
	web.MakeController(deps)
	http.ListenAndServe("localhost:3000", nil)
	return App{}
}

var apps = wire.NewSet(wire.Struct(new(crosscutting.Dependencies), "*"), web.MakeController, application5.Set, infrastructure2.Set, MakeApp)
